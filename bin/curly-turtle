#!/usr/bin/env node

/* Copyright (C) 2015 FiveYellowMice
 *
 * This file is part of Curly Turtle.
 *
 * Curly Turtle is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Curly Turtle is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have recieved a copy of the GNU General Public Licanse
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var fs = require("fs");
var curlyTurtle = require("../lib/curly-turtle.js");

var config = curlyTurtle.programInfo;

process.argv.slice(2).forEach(function (val, index, array) {
	switch (val) {
		case "-p":
		case "--port":
			setPort(array[index + 1]);
			break;
		case "-a":
		case "--address":
			setAddress(array[index + 1]);
			break;
		case "--sslkey":
			setSslkey(array[index + 1]);
			break;
		case "--sslcert":
			setSslcert(array[index + 1]);
			break;
		case "-c":
		case "--config":
			readConfig(array[index + 1]);
			break;
		case "-h":
		case "--help":
			help();
			process.exit();
		case "-v":
		case "--version":
			version();
			process.exit();
		case "--baseurl":
			setBaseurl(array[index + 1]);
			break;
		default:
			if ( /^-/.test(array[index - 1]) === false ) {
				invalidArgument(val);
			}
	}
});

function setAddress(arg) {
	if ( /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(arg) || /^([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])$/.test(arg) ) {
		config.address = arg;
	} else {
		invalidArgument("Address should be a valid IPv4 or IPv6 address.");
	}
}

function setPort(arg) {
	var port = Number(arg);
	if ( isNaN(port) === false ) {
		config.port = port;
	} else {
		invalidArgument("Port should be a number.");
	}
}

function setSslkey(arg) {
	try {
		config.sslkey = fs.readFileSync(arg);
	} catch (error) {
		invalidArgument(error);
	}
}

function setSslcert(arg) {
	try {
		config.sslcert = fs.readFileSync(arg);
	} catch (error) {
		invalidArgument(error);
	}
}

function setBaseurl(arg) {
	if ( /^[0-9a-zA-Z_/-]*$/.test(arg) ) {
		config.baseurl = arg.replace(/\/+/g, "/").replace(/^(?!\/)/, "/").replace(/\/$/, "");
	} else {
		invalidArgument("Baseurl should only contain lower case or upper case Latin letters and numbers.");
	}
}

function readConfig(arg) {
	try {
		var configFile = JSON.parse(fs.readFileSync(arg));
		if (configFile.address) setAddress(configFile.address);
		if (configFile.port) setPort(configFile.port);
		if (configFile.baseurl) setBaseurl(configFile.baseurl);
		if (configFile.sslkey) setSslkey(configFile.sslkey);
		if (configFile.sslcert) setSslcert(configFile.sslcert);
	} catch (error) {
		invalidArgument(error);
	}
}

function help() {
	version();
	console.log(
		"Usage: curly-turtle [OPTIONS]...\n" +
		"    -a, --address    Specify an address to listen\n" +
		"                     (default: 0.0.0.0 even IPv6 is available)\n" +
		"    -p, --port       Specify server port (default: 8081)\n" +
		"        --baseurl    Use a baseurl(path) to serve (eg. /google)\n" +
		"        --sslkey     Path of SSL key for HTTPS\n" +
		"        --sslcert    Path of SSL certificate for HTTPS\n" +
		"    -c, --config     Path of configuration file\n" +
		"    -h, --help       Show help\n" +
		"    -v, --version    Show version"
	);
}

function version() {
	console.log("Curly Turtle v" + config.version);
}

function invalidArgument(arg) {
	console.log("Invalid argument: " + arg + "\n");
	help();
	process.exit(2);
}

curlyTurtle.startServe(config);
